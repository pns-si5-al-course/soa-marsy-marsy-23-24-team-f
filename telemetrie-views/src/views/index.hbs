<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <title>App</title>
    <style>

      .line{
        display: flex;
        max-width: 100%;
        align-items: center;
        justify-content: center;
      }

      .secondary-charts {
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: center;
        position: relative;
        max-width: 50vw;
      }

      .alt_charts {
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: center;
        position: relative;
        max-width: 100vw;
      }

      #myChart {
        max-width: 70%;
        min-width: 50%;
        min-height: 100px;
        max-height: 300px;
        margin: 0 auto;
      }

      #speedometer {
          max-width: 80%;
          min-width: 80%;
          min-height: 100px;
          max-height: 400px;
          margin: 0 auto;
        }

      #booster {
        max-width: 70%;
        min-width: 50%;
        min-height: 100px;
        max-height: 300px;
        margin: 0 auto;
      }


      #fuel {
        max-width: 100%;
        min-width: 100%;
        min-height: 100px;
        max-height: 200px;
        margin: 0 auto;
      }

      #app {
        display: flex;
        position: relative;
        top: 3.5em;
        flex-direction: column;
        align-items: center;
        width: 100vw;
        max-height: 80vh;
        justify-content: center;
      }

    </style>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.socket.io/4.0.0/socket.io.min.js" integrity="sha384-DkkWv9oJFWLIydBXXjkBWnG1/fuVhw8YPBq37uvvD6WSYRFRqr21eY5Dg9ZhmWdy" crossorigin="anonymous"></script>
  </head>
  <body>
    {{ message }}
    <div id="app">
      <div class="alt_charts">
        <canvas id="myChart"></canvas>
          <canvas id="booster"></canvas>
      </div>
      <div class="secondary-charts">
        <canvas id="speedometer"></canvas>
        <canvas id="fuel"></canvas>
      </div>
      
    </div>
    
    <div class="dashboard-ctn"></div>
  </body>

  <script>

  // ------------------ VARIABLES FOR CHARTS ------------------
    const dash = document.querySelector(".dashboard-ctn");

    const dashboardCtn = document.querySelector(".dashboard-ctn");
    const ctx = document.getElementById("myChart").getContext("2d");
    
    const canvas = document.getElementById("speedometer");
    const ctx_2 = document.getElementById("speedometer").getContext("2d");

    const booster = document.getElementById("booster");
    const ctx_3 = document.getElementById("booster").getContext("2d");
    
    const fuel_gauge = document.getElementById("fuel");
    const ctx_4 = document.getElementById("fuel").getContext("2d");

    const MAX_SIZE = 400;

    let data = {
      altitude: 0,
      name: "",
      status: "",
      stages: [{}, {}],
      payload: {},
      speed: 0,
      timestamp: "",
    };


    // ------------------ SOCKET ------------------
    const socket = io.connect('ws://localhost:3007');

    socket.on('rocketTelemetrics', (message) => {
      try{
        data = JSON.parse(message).body;
        updateRocketCharts(data);
      }catch(e){
        // nothing
        console.log(e);
      }
    });

    socket.on('payloadTelemetrics', (message) => {
      try{
        
        data = JSON.parse(message).body;
        // TODO: implement payload charts on this dashboard or create a new one as Gwynne view
      }catch(e){
        // nothing
        console.log(e);
      }
    });


    // ------------------ FUNCTIONS ------------------
    function scrollToTop(ctn) {
      ctn.scrollTo(0, ctn.scrollHeight);
    }

    // ------------------ CHARTS ------------------  
    // Configurez la jauge de vitesse avec des données
    const data_speed = {
      labels: ["Vitesse (m/s)"],
      datasets: [
        {
          label: "Booster speed m/s",
          data: [0],
          backgroundColor: ["#73BA9B"], // Couleur des barres
          borderWidth: 1,
        },
        {
          label: "Rocket speed",
          data: [0],
          backgroundColor: ["#90EE90"], // Couleur des barres
          borderWidth: 1,
        }
      ],
    };
    // options de la jauge de vitesse
    const options = {
      responsive: false,
      maintainAspectRatio: false,
      indexAxis: 'y',
      scales: {
        x: {
          beginAtZero: true, 
          max: 10_000, 
        },
        y: {
          display: false,
        },
      },
      plugins: {
        legend: {
          position: 'top',
        },
        title: {
          display: true,
          text: 'Speedometer'
        }
      }
    };
    // Créez la jauge de vitesse
    const speedometer = new Chart(ctx_2, {
      type: "bar",
      data: data_speed,
      options: options,
    });


    const rocket_charts = new Chart(ctx, {
      type: "line",
      data: {
        labels: [], // Les labels seront ajoutés dynamiquement
        datasets: [
          {
            label: "Altitude",
            data: [], // Les données seront ajoutées dynamiquement
            borderColor: "rgba(255, 99, 132, 1)",
            borderWidth: 1,
          },
        ],
      },
      options: {
        scales: {
          y: {
            beginAtZero: true,
          },
        },
        plugins: {
          legend: {
            position: 'top',
          },
          title: {
            display: true,
            text: 'Rocket telemetrics'
          }
        }
      },
    });
  

    const booster_chart = new Chart(ctx_3, {
      type: "line",
      data: {
        labels: [], // Les labels seront ajoutés dynamiquement
        datasets: [
          {
            label: "Altitude",
            data: [], // Les données seront ajoutées dynamiquement
            borderColor: "rgba(255, 99, 132, 1)",
            backgroundColor: "rgba(255, 99, 132, 0.2)",
            borderWidth: 1,
          },
        ],
      },
      options: {
        scales: {
          y: {
            beginAtZero: true,
          },
          x: {
            display: false,
            beginAtZero: true,
            stacked: true,
          }
        },
        plugins: {
          legend: {
            position: 'top',
          },
          title: {
            display: true,
            text: 'Booster (stage 1) telemetrics'
          }
        }
      },
    });


    const fuel_chart = new Chart(ctx_4, {
      type: "line",
      data: {
        labels: [], // Les labels seront ajoutés dynamiquement
        datasets: [
          {
            label: "Fuel 1st stage ( Booster )",
            data: [], // Les données seront ajoutées dynamiquement
            borderColor: "rgba(100, 99, 255, 1)",
            backgroundColor: "rgba(50, 99, 255, 0.2)",
            borderWidth: 1,
          },
          {
            label: "Fuel 2nd stage ( Rocket )",
            data: [], 
            borderColor: "rgba(200, 50, 50, 1)",
            backgroundColor: "rgba(200, 50, 50, 0.2)",
            borderWidth: 1,
            stack: 'combined',
          },
        ],
      },
      options: {
        scales: {
          y: {
            beginAtZero: true,
          },
          x: {
            display: false,
            beginAtZero: true,
            stacked: true,
          }
        },
        plugins: {
      legend: {
        position: 'top',
      },
      title: {
        display: true,
        text: 'Fuels'
      }
      }
      },
    });


    // ------------------ UPDATE CHARTS ------------------

    function updateSpeed(speed_list) {
      speedometer.data.datasets[0].data[0] = speed_list[0];
      speedometer.data.datasets[1].data[0] = speed_list[1];
      speedometer.update();
    }

    function updateBooster(stage_1) {
      const altitude = stage_1.altitude;
      const status = stage_1.status;

      if(booster_chart.data.datasets[0].data.length > MAX_SIZE){
        booster_chart.data.labels.shift();
        booster_chart.data.datasets[0].data.shift();
      }

      booster_chart.data.labels.push(status);
      booster_chart.data.datasets[0].data.push(altitude);
      booster_chart.update();
    }

    function updateFuel(fuel_list, timestamp){
      fuel_chart.data.labels.push(timestamp);
      fuel_chart.data.datasets[0].data.push(fuel_list[0]);
      fuel_chart.data.datasets[1].data.push(fuel_list[1]);

      if(fuel_chart.data.datasets[0].data.length > MAX_SIZE){
        fuel_chart.data.labels.shift();
        fuel_chart.data.datasets[0].data.shift();
        fuel_chart.data.datasets[1].data.shift();
      }

      fuel_chart.update();
    }

    function updateRocketCharts(data){
      const fuel_1 = data.stages[0].fuel;
      const fuel_2 = data.stages[1].fuel;

      rocket_charts.data.labels.push(data.timestamp);
      rocket_charts.data.datasets[0].data.push(data.payload.altitude);
      rocket_charts.update();

      if(rocket_charts.data.datasets[0].data.length > MAX_SIZE){
        rocket_charts.data.labels.shift();
        rocket_charts.data.datasets[0].data.shift();
      }

      // Mise à jour de la jauge de vitesse
      updateSpeed([data.stages[0].speed, data.stages[1].speed]);

      //mise a jour des donnees du booster
      updateBooster(data.stages[0]);

      //mise a jour des donnees du fuel
      updateFuel([fuel_1, fuel_2], data.timestamp);
    }

  </script>
</html>
