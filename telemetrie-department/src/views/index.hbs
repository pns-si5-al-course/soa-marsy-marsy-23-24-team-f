<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <title>App</title>
    <style>
      .dashboard-ctn {
        width: auto;
        max-height: 270px;
        overflow: scroll;
        display: flex;
        flex-direction: column;
        scroll-behavior: smooth;
      }
      .dashboard {
        background-color: #f5f5f5;
        border: 1px solid #ccc;
        border-radius: 5px;
        padding: 20px;
        width: auto;
        max-height: 150px;
        box-shadow: 0px 0px 5px rgba(0, 0, 0, 0.2);
      }

      .dashboard p {
        margin: 10px 0;
        font-size: 16px;
        color: #333;
      }

      .dashboard p:nth-child(odd) {
        font-weight: bold;
      }

      .dashboard p:first-child {
        font-size: 20px;
        margin-top: 0;
      }

      #myChart {
        width: 70%;
        max-width: 700px;
        max-height: 400px;
        margin: 0 auto;
        margin-top: 20px;
      }
    </style>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  </head>
  <body>
    {{ message }}
    <canvas id="myChart"></canvas>
    <div class="dashboard-ctn"></div>
  </body>

  <script>
    async function getTelemetrics() {
      const telemetry = await fetch("http://localhost:3003/rocket/telemetrics").then((response) => {
        return response.json();
      });
      return telemetry;
    }

    const message = document.querySelector(".dashboard-ctn");
    const ctx = document.getElementById("myChart").getContext("2d");

    const data = {
      altitude: 0,
      name: "",
      status: "",
      stages: [{}, {}],
      payload: {},
      timestamp: "",
    };

    const int = setInterval(() => {
      const telemetry = getTelemetrics();
      telemetry.then((datas) => {
        console.log("update");

        data.altitude = datas.altitude;
        data.name = datas.name;
        data.status = datas.status;
        data.payload = datas.payload;
        data.stages = datas.stages;
        data.timestamp = datas.timestamp;

        // Mise à jour des données du graphique
        myChart.data.labels.push(data.timestamp); // Ajoutez un timestamp comme label
        myChart.data.datasets[0].data.push(data.altitude); // Ajoutez l'altitude
        myChart.data.datasets[1].data.push(data.stages[0].fuel); // Ajoutez le carburant du stade 1
        myChart.data.datasets[2].data.push(data.stages[1].fuel); // Ajoutez le carburant du stade 2
        myChart.update();

        message.innerHTML +=
          "<div class='dashboard'>" +
          "<p>Altitude : " + data.altitude + " Feets</p>" +
          "<p>Name : " + data.name + "</p>" +
          "<p>Status : " + data.status + "</p>" +
          "<p>Stages 1 :" + data.stages[0].fuel + "</p>" +
          "<p>Stages 2 :" + data.stages[1].fuel + "</p>" +
          "<p>Passengers : " + data.payload.passengers + "</p>" +
          "<p>Weight : " + data.payload.weight + "</p>" +
          "<p>Timestamps : " + data.timestamp + "</p>" +
          "</div>";
      });
    }, 300);

    setInterval(() => {
      const dashboardCtn = document.querySelector(".dashboard-ctn");
      scrollToTop(dashboardCtn);
    }, 1500);

    function scrollToTop(ctn) {
      ctn.scrollTo(0, ctn.scrollHeight);
    }

    const myChart = new Chart(ctx, {
      type: "line", // Utilisez le type de graphique "line" pour un graphique à lignes multiples
      data: {
        labels: [], // Les labels seront ajoutés dynamiquement
        datasets: [
          {
            label: "Altitude",
            data: [], // Les données d'altitude seront ajoutées dynamiquement
            borderColor: "rgba(255, 99, 132, 1)",
            borderWidth: 1,
          },
          {
            label: "Fuel - Stage 1",
            data: [], // Les données de carburant du stade 1 seront ajoutées dynamiquement
            borderColor: "rgba(54, 162, 235, 1)",
            borderWidth: 1,
          },
          {
            label: "Fuel - Stage 2",
            data: [], // Les données de carburant du stade 2 seront ajoutées dynamiquement
            borderColor: "rgba(0, 99, 132, 1)",
            borderWidth: 1,
          },
        ],
      },
      options: {
        scales: {
          y: {
            beginAtZero: true,
          },
        },
      },
    });
  </script>
</html>
