<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <title>App</title>
    <style>
      /* Style du conteneur du dashboard */
      .dashboard-ctn {
        width: auto;
        max-height: 150px;
        overflow: scroll;
        display: flex;
        flex-direction: column;
      }
.dashboard {
  background-color: #f5f5f5;
  border: 1px solid #ccc;
  border-radius: 5px;
  padding: 20px;
  width: auto;
  max-height: auto;
  box-shadow: 0px 0px 5px rgba(0, 0, 0, 0.2);
  
}

/* Style des paragraphes à l'intérieur du dashboard */
.dashboard p {
  margin: 10px 0;
  font-size: 16px;
  color: #333;
}

/* Style spécifique pour chaque paragraphe */
.dashboard p:nth-child(odd) {
  font-weight: bold;
}

/* Style du titre */
.dashboard p:first-child {
  font-size: 20px;
  margin-top: 0;
}

#myChart {
  width: 70%;
  max-width: 700px;
  margin: 0 auto;
  margin-top: 50px;
}

    </style>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  </head>
  <body>
    {{ message }}
    <canvas id="myChart"></canvas>
    <div class="dashboard-ctn"></div>
  </body>
  
  <script>


    async function getTelemetrics(){
      const telemetry = await fetch("http://localhost:3003/rocket/telemetrics")
      .then((response) => {
        return response.json();
      })
      return telemetry;
    }
    const message = document.querySelector(".dashboard-ctn");
    const ctx = document.getElementById('myChart').getContext('2d');

    const data = {
      altitude: 0,
      name: "",
      status: "",
      stages: [{}, {}],
      payload: {},
      timestamp: ""
    };
    const int = setInterval(() => {
      const telemetry = getTelemetrics();
      telemetry.then((datas) => {
        console.log("update");

        data.altitude = datas.altitude;
        data.name = datas.name;
        data.status = datas.status;
        data.payload = datas.payload;
        data.stages = datas.stages;
        data.timestamp = datas.timestamp;

        myChart.data.datasets[0].data[0] = data.altitude;
        console.log(data.stages);
        console.log(data.stages[0].fuel);
        myChart.data.datasets[0].data[1] = data.stages[0].fuel;
        myChart.data.datasets[0].data[1] = data.stages[1].fuel;
        myChart.update();

        message.innerHTML +=
        "<div class='dashboard'>"+
        "<p>Altitude : " + data.altitude + " Feets</p>" +
        "<p>Name : " + data.name + "</p>" +
        "<p>Status : " + data.status + "</p>" +
        "<p>Stages 1 :" + data.stages[0].fuel + "</p>" +
        "<p>Stages 2 :" + data.stages[1].fuel + "</p>" +
        "<p>Passengers : " + data.payload.passengers + "</p>" +
        "<p>Weight : " + data.payload.weight + "</p>" +
        "<p>Timestamps : " + data.timestamp + "</p>" +
      "</div>"

      scrollToTop(message);
    });
    }, 300)

function scrollToTop(ctn) {
      ctn.scrollTo(0, ctn.scrollHeight);
    }

const myChart = new Chart(ctx, {
  type: 'polarArea',
  data: {
    labels: ['Altitude', 'Fuel'],
    datasets: [{
      label: 'Valeurs',
      data: [data.altitude, data.stages[0].fuel, data.stages[1].fuel],
      backgroundColor: [
        'rgba(255, 99, 132, 0.5)',
        'rgba(54, 162, 235, 0.5)',
        'rgba(0, 99, 132, 0.5)'
      ],
      borderColor: [
        'rgba(255, 99, 132, 1)',
        'rgba(54, 162, 235, 1)',
        'rgba(0, 99, 132, 1)'
      ],
      borderWidth: 1
    }]
  },
  options: {
    scales: {
      r: {
        beginAtZero: true,
        suggestedMin: 0, // Assurez-vous que le minimum est de 0
        suggestedMax: 4000 // Vous pouvez ajuster ceci en fonction de vos valeurs maximales
      }
    }
  }
});

    

  </script>

  
</html>