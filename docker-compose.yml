version: '3'

networks:
  rocket-network:
    name: rocket-network
    driver: bridge
  nestjs-telemetrics-mongo:
    driver: bridge
  nestjs-payload-telemetrics-mongo:
    driver: bridge

services:
  zookeeper:
    image: wurstmeister/zookeeper:latest
    ports:
      - 2181:2181
    volumes:
      - ./_data/zookeeper/data:/data
    networks:
      - rocket-network

  kafka:
    image: wurstmeister/kafka:2.12-2.5.0
    hostname: kafka
    #container_name: kafka
    ports:
      - 9092:9092
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: LISTENER_DOCKER_INTERNAL://:19092,LISTENER_DOCKER_EXTERNAL://:9092
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka:19092,LISTENER_DOCKER_EXTERNAL://127.0.0.1:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_BROKER_ID: 1
      KAFKA_CREATE_TOPICS: __consumer_offsets:50:1,user.create:1:1
    volumes:
      - ./_data/kafka/data:/var/lib/kafka/data
    depends_on:
      - zookeeper
    networks:
      - rocket-network
  
  telemetrie-service:
      image: telemetrie
      build:
        context: telemetrie-department/
        dockerfile: Dockerfile.production
      restart: always
      depends_on:
        - mongo_db_telemetrics
        - kafka
      ports:
        - "3003:3003"
      networks:
        - nestjs-telemetrics-mongo
        - rocket-network

  mongo_db_telemetrics:
    image: "mongo:5.0.0"
    restart: always
    ports:
      - 27018:27017
    networks:
      - nestjs-telemetrics-mongo

  rocket-service:
    image: rocket-status
    build:
        context: rocket-department/
        dockerfile: Dockerfile.production
    restart: always
    depends_on:
      - kafka
    ports:
      - "3001:3001"
    networks:
      - rocket-network

  payload-service:
      image: payload-status
      build:
        context: payload-department/
        dockerfile: Dockerfile.production
      restart: always
      depends_on:
        - mongo_db_payload_telemetrics
        - kafka
      ports:
        - "3004:3004"
      networks:
        - rocket-network
        - nestjs-payload-telemetrics-mongo
  mongo_db_payload_telemetrics:
    image: "mongo:5.0.0"
    restart: always
    ports:
      - 27019:27017
    networks:
      - nestjs-payload-telemetrics-mongo

  mission-commander-service:
      image: mission-commander
      build:
        context: mission-commander-department/
        dockerfile: Dockerfile.production
      restart: always
      depends_on:
        - kafka
      ports:
        - "3006:3006"
      networks:
      - rocket-network
      
  weather-service:
    image: weather-status
    build:
        context: weather-department/
        dockerfile: Dockerfile.production
    restart: always
    depends_on:
      - kafka
    ports:
      - "3002:3002"
    networks:
      - rocket-network

  rocket-object-service:
    image: rocket-object-service
    build:
        context: rocket/
        dockerfile: Dockerfile.production
    restart: always
    depends_on:
      - kafka
    ports:
      - "3005:3005"
    networks:
      - rocket-network
