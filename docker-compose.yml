version: '3'


networks:
  rocket-network:
    name: rocket-network
    driver: bridge
  nestjs-telemetrics-mongo:
    driver: bridge
  nestjs-payload-telemetrics-mongo:
    driver: bridge

services:
  zookeeper:
    image: wurstmeister/zookeeper:latest
    platform: linux/amd64
    ports:
      - 2181:2181
    volumes:
      - ./_data/zookeeper/data:/data
    networks:
      - rocket-network
    healthcheck:
      test: nc -z localhost 2181 || exit -1
      interval: 30s
      timeout: 10s
      retries: 10
  kafka:
    image: wurstmeister/kafka:2.12-2.5.0
    hostname: kafka
    #container_name: kafka
    ports:
      - 9092:9092
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: LISTENER_DOCKER_INTERNAL://:19092,LISTENER_DOCKER_EXTERNAL://:9092
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka:19092,LISTENER_DOCKER_EXTERNAL://127.0.0.1:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_BROKER_ID: 1
      KAFKA_CREATE_TOPICS: __consumer_offsets:50:1,user.create:1:1
    volumes:
      - ./_data/kafka/data:/var/lib/kafka/data
    depends_on:
      - zookeeper
    networks:
      - rocket-network
    healthcheck:
      test: nc -z localhost 9092 || exit -1
      interval: 30s
      timeout: 10s
      retries: 10
  
  telemetrie-service:
      image: telemetrie-department
      restart: always
      depends_on:
        kafka:
          condition: service_healthy
      ports:
        - "3003:3003"
      networks:
        - nestjs-telemetrics-mongo
        - rocket-network
      healthcheck:
        test: ["CMD", "wget", "-q", "--spider", "http://telemetrie-service:3003/isAlive"]
        interval: 10s
        timeout: 10s
        retries: 8

  mongo_db_telemetrics:
    image: "mongo:5.0.0"
    restart: always
    ports:
      - 27018:27017
    networks:
      - nestjs-telemetrics-mongo

  rocket-service:
    image: rocket-status
    restart: always
    depends_on:
      - kafka
    ports:
      - "3001:3001"
    networks:
      - rocket-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://rocket-service:3001/"]
      interval: 30s
      timeout: 10s
      retries: 3

  payload-service:
      image: payload-status
      restart: always
      depends_on:
        kafka:
          condition: service_healthy
      ports:
        - "3004:3004"
      networks:
        - rocket-network
        - nestjs-payload-telemetrics-mongo
      healthcheck:
        test: ["CMD", "curl", "-f", "http://payload-service:3004/payload"]
        interval: 30s
        timeout: 10s
        retries: 3

  mongo_db_payload_telemetrics:
    image: "mongo:5.0.0"
    restart: always
    ports:
      - 27019:27017
    networks:
      - nestjs-payload-telemetrics-mongo

  mission-commander-service:
      image: mission-commander
      restart: always
      depends_on:
        - kafka
      ports:
        - "3006:3006"
      networks:
        - rocket-network

  weather-service:
    image: weather-status
    restart: always
    depends_on:
      - kafka
    ports:
      - "3002:3002"
    networks:
      - rocket-network

  rocket-object-service:
    image: rocket-object-service
    restart: always
    depends_on:
      telemetrie-service:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "3005:3005"
    networks:
      - rocket-network
    healthcheck:
        test: ["CMD", "curl", "-f", "http://rocket-object-service:3005/"]
        interval: 30s
        timeout: 10s
        retries: 3

  view-service:
      image: telemetrie-views
      restart: always
      ports:
        - "3007:3007"
      networks:
        - rocket-network  
      depends_on:
        kafka:
          condition: service_healthy
      healthcheck:
        test: ["CMD", "wget", "-q", "--spider", "http://view-servicenh:3007/"]
        interval: 10s
        timeout: 10s
        retries: 5
  
  scripts-service:
      image: scripts
      depends_on:
        - kafka
        - telemetrie-service
      restart: always
      ports:
        - "3000:3000"
      networks:
        - rocket-network
